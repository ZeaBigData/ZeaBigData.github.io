servr::httd()
install.packages('servr', repos = 'http://yihui.name/xran')  # devel version
install.packages("servr", repos = "http://yihui.name/xran")
jekyll()
library(servr)
jekyll()
?jekyll
?Sys.getenv('USER')
Sys.getenv('USER') == 'yangjl'
Sys.getenv('USER') == 'jyang'
baseurl = servr:::jekyll_config('.', 'baseurl', '/')
baseurl
baseurl
fig.path
knitr::opts_chunk$set(
fig.path   = sprintf('/figure/%s/', d),
cache.path = sprintf('cache/%s/', d)
)
# input/output filenames are passed as two additional arguments to Rscript
a = commandArgs(TRUE)
d = gsub('^_|[.][a-zA-Z]+$', '', a[1])
knitr::opts_chunk$set(
fig.path   = sprintf('/figure/%s/', d),
cache.path = sprintf('cache/%s/', d)
)
sprintf('/figure/%s/', d)
local({
# fall back on '/' if baseurl is not specified
baseurl = servr:::jekyll_config('.', 'baseurl', '/')
knitr::opts_knit$set(base.url = baseurl)
# fall back on 'kramdown' if markdown engine is not specified
markdown = servr:::jekyll_config('.', 'markdown', 'kramdown')
# see if we need to use the Jekyll render in knitr
if (markdown == 'kramdown') {
knitr::render_jekyll()
} else knitr::render_markdown()
# input/output filenames are passed as two additional arguments to Rscript
a = commandArgs(TRUE)
d = gsub('^_|[.][a-zA-Z]+$', '', a[1])
knitr::opts_chunk$set(
fig.path   = sprintf('/figure/%s/', d),
cache.path = sprintf('cache/%s/', d)
)
# set where you want to host the figures (I store them in my Dropbox Public
# folder, and you might prefer putting them in GIT)
if (Sys.getenv('USER') == 'yihui') {
# these settings are only for myself, and they will not apply to you, but
# you may want to adapt them to your own website
knitr::opts_chunk$set(fig.path = sprintf('%s/', gsub('^.+/', '', d)))
knitr::opts_knit$set(
base.dir = '~/Dropbox/Public/jekyll/',
base.url = 'http://db.yihui.name/jekyll/'
)
}
knitr::opts_knit$set(width = 70)
knitr::knit(a[1], a[2], quiet = TRUE, encoding = 'UTF-8', envir = .GlobalEnv)
})
?servr:::jekyll_config
?jekyll_config
library(servr)
?jekyll_config
??jekyll_config
sprintf('/figure/%s/', d)
baseurl = servr:::jekyll_config('.', 'baseurl', '/')
baseurl
library(lme4)
#make data frame
t_line=c(rep("b73",3),rep("lux",3)) #line names
t_g=c(5.87,5.99,6.02,9.21,9.15,8.86) #genome size
tenaillon_data=data.frame(t_line,t_g)
#model as only one effect -- line. here as random. fixed better?
t1 = lmer(tenaillon_data$t_g ~ 1|tenaillon_data$t_line)
t1_line = unlist(VarCorr(t1))[[1]];
t1_res=attr(VarCorr(t1), "sc")^2
t1_res
tenaillon_data
summary(t1_line)
summary(t1)
servr::httd()
jekyll()
library(servr)
?jekyll()
jekyll()
getwd()
install.packages('servr', repos = 'http://yihui.name/xran')  # devel version
install.packages("servr", repos = "http://yihui.name/xran")
library("servr")
system.file('bin', package = 'servr')
servr::httd(,4000,TRUE)
?httd
httd()
jekyll()
devtools::install_github('rstudio/blogdown')
blogdown::install_hugo()
devtools::install_github('rstudio/blogdown')
?httd
httd()
?httd
?jekyll
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"), script = c("Makefile", "build.R"), serve = TRUE,
command = "jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", "_posts", "_posts"), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", ".", "_posts"), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", ".", "_posts"), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", ".", "_posts"), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", ".", "_posts"), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", ".", "_posts"), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", ".", "_posts"), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", ".", "_posts"), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
install.packages("xtable")
library(xtable)
?print.xtable
## Only run this example in interactive R sessions
if (interactive()) {
# table example
shinyApp(
ui = fluidPage(
fluidRow(
column(12,
tableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderTable(iris)
}
)
# DataTables example
shinyApp(
ui = fluidPage(
fluidRow(
column(12,
dataTableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderDataTable(iris)
}
)
}
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
library("googleVis")
install.packages("googleVis")
library(googleVis)
install.packages(c("devtools","jsonlite", "knitr", "shiny", "httpuv"))
install.packages(c("devtools", "jsonlite", "knitr", "shiny", "httpuv"))
library(googleVis)
demo(googleVis)
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", ".", "_posts"), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", ".", "_posts"), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", ".", "_posts"), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
knitr::opts_chunk$set(echo = FALSE)
library(googleVis)
op <- options(gvis.plot.tag='chart')
## Add the mean
CityPopularity$Mean=mean(CityPopularity$Popularity)
CC <- gvisComboChart(CityPopularity, xvar='City',
yvar=c('Mean', 'Popularity'),
options=list(seriesType='bars',
width=450, height=300,
title='City Popularity',
series='{0: {type:\"line\"}}'))
plot(CC)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", ".", "_posts"), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
?gvisTable
d <- read.csv("~/Documents/Github/ZeaBigData/data/export_2017_02_07_03_48_11.csv")
head(d)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", ".", "_posts"), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
d <- read.csv("~/Documents/Github/ZeaBigData/data/export_2017_02_07_03_48_11.csv")
PopTable <- gvisTable(d, #formats=list(Population="#,###",'% of World Population'='#.#%'),
options=list(page='enable', gvis.editor='Plant.ID'))
plot(PopTable)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", ".", "_posts"), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", ".", "_posts"), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
d <- fread("~/Documents/Github/ZeaBigData/data/export_2017_02_07_03_48_11.txt", data.table=FALSE)
library("data.table")
d <- fread("~/Documents/Github/ZeaBigData/data/export_2017_02_07_03_48_11.txt", data.table=FALSE)
d <- fread("~/Documents/Github/ZeaBigData/data/export_2017_02_07_03_31_16.txt", data.table=FALSE)
dim(d)
d <- read.delim("~/Documents/Github/ZeaBigData/data/export_2017_02_07_03_31_16.txt", header=TRUE)
d <- read.table("~/Documents/Github/ZeaBigData/data/export_2017_02_07_03_31_16.txt", header=TRUE)
d <- fread("~/Documents/Github/ZeaBigData/data/export_2017_02_07_03_48_11.csv", data.table=FALSE)
d <- fread("~/Documents/Github/ZeaBigData/data/export_2017_02_07_03_48_11.csv", data.table=FALSE)
library("data.table")
d <- fread("~/Documents/Github/ZeaBigData/data/export_2017_02_07_03_48_11.csv", data.table=FALSE)
library("data.table")
d <- fread("~/Documents/Github/ZeaBigData/data/export_2017_02_07_03_48_11.csv", data.table=FALSE)
PopTable <- gvisTable(d[1:100,], #formats=list(Population="#,###",'% of World Population'='#.#%'),
options=list(page='enable'))
plot(PopTable)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", ".", "_posts"), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", ".", "_posts"), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
?gvisTable
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", ".", "_posts"), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", ".", "_posts"), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", ".", "_posts"), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", ".", "_posts"), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", ".", "_posts"), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", ".", "_posts"), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
library(servr)
jekyll(dir = ".", input = c(".", "_source", "_posts"),
output = c(".", ".", "_posts"), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
jekyll(dir = ".", input = c("_source", "_largepost"),
output = c("_posts", "."), script = c("Makefile", "build.R"), serve = FALSE,
command = "jekyll build")
